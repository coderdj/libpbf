{"name":"libpff","tagline":"File format based on Google protocol buffers. Suitable for storage of waveforms or other binned data.","body":"### Welcome to the protocol buffer file format\r\n\r\nThis file format is designed for the storage of binned data, for example waveforms. Some of the key design features are: \r\n  * Simple interface for writing and reading\r\n  * Fast, dynamic compression for lightweight files\r\n  * Internal data sorting allowing parallel input\r\n  * Clean, easily extendable code\r\n\r\nThis short document should teach you all you need to know to use the class. \r\n\r\n### Installation\r\n\r\nFetch the code from github.\r\n\r\n`git clone https://github.com/coderdj/pff`\r\n\r\nThere are a few dependencies. You need the build classes (a compiler, make, etc.), as well as the protocol buffer and snappy libraries from google. On Ubuntu you can install this with:\r\n\r\n`apt-get install build-essential libsnappy-dev libprotobuf-dev`\r\n\r\nFor now you will have to re-generate the protocol buffer classes with your version of libprotobuf. At a later stage this step will be built into the build scripts. See the protoc/README.rst for more info.\r\n\r\n```\r\ncd protoc\r\nprotoc -I=./ --cpp_out=../src protocDef.proto\r\n```\r\n\r\nNow that everything's ready go the top level directory type 'make'. The library should appear in the current directory. You will have to make the library and headers find-able by your compiler in order to use it. \r\n \r\n\r\n### Writing to Files\r\n\r\nThe basic procedure for writing to files is: \r\n\r\n1. Open the file\r\n2. Open an event\r\n3. Put data into the event\r\n4. Close the event\r\n5. Go back to step 2 until you're out of data\r\n6. Close the file\r\n\r\nYou can have multiple events open at the same time. The events will be placed into an output buffer and sorted by time stamp when they are closed. Data within an event is sorted by channel number (or, optionally, by module/channel). Raw data within a channel can again be sorted by time stamp.\r\n\r\nLet's look at each step individually. The code used here is also illustrated with an example file builder in the examples directory. \r\n\r\nFirst, opening the file is done simply with the following code:\r\n\r\n```c++\r\n pff_output outfile(); \r\n int s = outfile.open_file(outputPath, outputOptions);     //outputPath and outputOptions are strings\r\n if(s!=0) cout<<\"Error opening file\"<<endl;\r\n```\r\n\r\nor, using the constructor:\r\n\r\n```c++\r\npff_output *outfile;\r\ntry{\r\n    outfile = new pff_output(outputPath, outputOptions);\r\n} \r\ncatch(...){\r\n    cout<<\"Error opening file!\"<<endl;\r\n}\r\n```\r\n\r\n### Authors and Contributors\r\nWritten by Daniel Coderre (@coderdj), 2014. \r\n\r\n### Support or Contact\r\nHaving trouble? File an issue report at http://github.com/coderdj/pff.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}